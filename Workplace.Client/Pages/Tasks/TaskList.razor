@page "/tasks"
@using Workplace.Shared
@inject HttpClient httpClient
@rendermode InteractiveAuto

<PageTitle>Список задач</PageTitle>

<h3>Спиок задач</h3>

@if (tasks == null)
{
    <p>Loading ...</p>
}
else
{
    <TaskModal @ref="TaskModal" OnSubmit="OnSubmitHandler" />

    <div class="mb-3">
        <button type="button" class="btn btn-secondary" @onclick="OnAddHandler">
            Новая задача
        </button>
    </div>
    <div class="row">
        @foreach (var taskItem in tasks)
        {
            <div class="card col-sm-12 col-md-6 col-xl-4 col-xxl-3">
                <TaskCard TaskItem="taskItem"
                    OnUpdate="async () => await OnUpdateHandler(taskItem)"
                    OnDelete="async () => await OnDeleteHandler(taskItem.Id)" />
            </div>
        }
    </div>
}

@code {
    TaskModal? TaskModal { get; set; }

    IEnumerable<TaskItemDTO>? tasks;

    protected override async Task OnParametersSetAsync()
    {
        // tasks = await data.GetAllAsync();
        tasks = await httpClient.GetFromJsonAsync<IEnumerable<TaskItemDTO>>("/api/task");
    }

    async Task OnAddHandler()
    {
        await Task.Run(() => TaskModal!.Open(new()));
    }

    async Task OnUpdateHandler(TaskItemDTO taskItem)
    {
        await Task.Run(() => TaskModal!.Open(taskItem));
    }

    async Task OnSubmitHandler(TaskItemDTO taskItem)
    {
        // await data.UpdateAsync(taskItem);
    }
    
    async Task OnDeleteHandler(int taskItemId)
    {
        // await data.DeleteAsync(taskItemId);
    }
}
